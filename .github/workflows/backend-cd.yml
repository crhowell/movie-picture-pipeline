name: Backend Deployment (CD)

on: 
    workflow_dispatch:
    push:
        branches:
            - main

env:
    PYTHON_VERSION: '3.10'
    # path to the backend root folder
    SRC_DIR: '${{ github.workspace }}/src/backend/'
    K8_DIR: '${{ github.workspace }}/src/backend/k8s'
    ECR_REPO: '815822840554.dkr.ecr.us-west-2.amazonaws.com/backend'

jobs:
    lint:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
                
            - name: Setup Python ${{env.PYTHON_VERSION}}
              uses: actions/setup-python@v4
              with:
                python-version: ${{env.PYTHON_VERSION}}
            # TODO: Perform a cache action to restore cache before deps install.
            - name: Install dependencies
              run: cd ${{env.SRC_DIR}} && pipenv install
            - name: Run linter
              run: cd ${{env.SRC_DIR}} && pipenv run lint
    test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
                
            - name: Setup Python ${{env.PYTHON_VERSION}}
              uses: actions/setup-python@v4
              with:
                python-version: ${{env.PYTHON_VERSION}}
            # TODO: Perform a cache action to restore cache before deps install.
            - name: Install dependencies
              run: cd ${{env.SRC_DIR}} && pipenv install
            - name: Run linter
              run: cd ${{env.SRC_DIR}} && pipenv run test
    
    build:
        needs: [lint, test]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
            
            # Configure AWS credentials
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # Use your stored AWS Access Key ID
                aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }} # Use your stored AWS Secret Access Key
                aws-region: ${{ env.AWS_REGION }} # Use the region from your environment variables
            
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2
            
            - name: Build, tag, and push docker image to Amazon ECR
              env:
                REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                REPOSITORY: backend
                IMAGE_TAG: ${{ github.sha }}
              # TODO: how to get the REACT_APP_MOVIE_API_URL and populate it into docker build command?
              run: |
                  cd ${{env.SRC_DIR}}
                  docker build --tag=$REGISTRY/$REPOSITORY:$IMAGE_TAG .
                  docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
            
            - name: Set up kubectl
              uses: azure/setup-kubectl@v3
              with:
                version: 'latest'
            
            - name: Deploy to Kubernetes
              env:
                REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                REPOSITORY: backend
                IMAGE_TAG: ${{ github.sha }}
                KUBE_CONFIG: ${{ secrets.KUBECONFIG }}
              run: |
                cd ${{env.K8_DIR}}
                kubectl set image backend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
                kubectl apply -k .