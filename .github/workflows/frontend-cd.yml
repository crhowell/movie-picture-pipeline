name: Frontend Deployment (CD)

on: 
    push:
        branches:
            - main

env:
    NODE_VERSION: 'latest'
    # path to the frontend root folder
    SRC_DIR: '${{ github.workspace }}/src/frontend/'
    AWS_REGION: 'us-west-2'
    TF_ACTION_WORKING_DIR: 'src/terraform'

jobs:
    lint:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
                
            - name: Setup NodeJS ${{env.NODE_VERSION}}
              uses: actions/setup-node@v3
              with:
                node-version: ${{env.NODE_VERSION}}
                cache: 'npm'
                cache-dependency-path: '${{ env.SRC_DIR}}/package-lock.json'
            # TODO: Perform a cache action to restore cache before deps install.
            - name: Install dependencies
              run: cd ${{env.SRC_DIR}} && npm ci
            - name: Run linting
              run: cd ${{env.SRC_DIR}} && npm run lint
    
    test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
                
            - name: Setup NodeJS ${{env.NODE_VERSION}}
              uses: actions/setup-node@v3
              with:
                node-version: ${{env.NODE_VERSION}}
                cache: 'npm'
                cache-dependency-path: '${{ env.SRC_DIR}}/package-lock.json'
            # TODO: Perform a cache action to restore cache before deps install.
            - name: Install dependencies
              run: cd ${{env.SRC_DIR}} && npm ci
            - name: Run tests
              run: cd ${{env.SRC_DIR}} && npm test
    build:
        runs-on: ubuntu-latest
        needs: [lint, test]
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
                
            - name: Use NodeJS ${{env.NODE_VERSION}}
              uses: actions/setup-node@v3
              with:
                node-version: ${{env.NODE_VERSION}}
                cache: 'npm'
                cache-dependency-path: '${{ env.SRC_DIR}}/package-lock.json'

            # TODO: Perform a cache action to restore cache before deps install.
            - name: Install dependencies
              run: cd ${{env.SRC_DIR}} && npm ci
            
            - name: Build
              run: cd ${{env.SRC_DIR}} && npm test
    
    deploy:
        needs: [test, build]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            # Configure AWS credentials
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # Use your stored AWS Access Key ID
                aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }} # Use your stored AWS Secret Access Key
                aws-region: ${{ env.AWS_REGION }} # Use the region from your environment variables
            
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2
            
            - name: Build, tag, and push docker image to Amazon ECR
              env:
                REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                REPOSITORY: frontend
                IMAGE_TAG: ${{ github.sha }}
              # TODO: how to get the REACT_APP_MOVIE_API_URL and populate it into docker build command?
              run: |
                  cd ${{env.SRC_DIR}}
                  docker build --build-arg=REACT_APP_MOVIE_API_URL=a2d2a77f49e3940e8a1534d05d118a51-1204884647.us-west-2.elb.amazonaws.com --tag=$REGISTRY/$REPOSITORY:$IMAGE_TAG .
                  docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
            
            - name: Set up kubectl
              uses: azure/setup-kubectl@v2
              with:
                version: 'latest'
            
            - name: Deploy to Kubernetes
              env:
                REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                REPOSITORY: frontend
                IMAGE_TAG: ${{ github.sha }}
                KUBE_CONFIG: ${{ secrets.KUBECONFIG }}
              run: |
                  kubectl kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
                  kubectl kustomize build | kubectl apply -f -
