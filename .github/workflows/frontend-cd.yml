name: Frontend Deployment (CD)

on: 
    push:
        branches:
            - main

env:
    NODE_VERSION: 'latest'
    # path to the frontend root folder
    SRC_DIR: '${{ github.workspace }}/src/frontend/'
    AWS_REGION: 'us-west-2'
    ECR_REPO: 'movie-pipeline'
    TF_ACTION_WORKING_DIR: 'src/terraform'


# TODO: EXECUTE this pipeline on merges to main
# TODO: Also manual run 
# 
# TODO: Run linting
# TODO: Run tests
# TODO: build with docker using --build-args to pass REACT_APP_MOVIE_API_URL
# TODO: login to ecr using github secrets
# TODO: push the docker image to ECR

jobs:
    lint:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
                
            - name: Setup NodeJS ${{env.NODE_VERSION}}
              uses: actions/setup-node@v3
              with:
                node-version: ${{env.NODE_VERSION}}
                cache: 'npm'
            # TODO: Perform a cache action to restore cache before deps install.
            - name: Install dependencies
              run: cd ${{env.SRC_DIR}} && npm ci
            - name: Run linting
              run: cd ${{env.SRC_DIR}} && npm run lint
    
    test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
                
            - name: Setup NodeJS ${{env.NODE_VERSION}}
              uses: actions/setup-node@v3
              with:
                node-version: ${{env.NODE_VERSION}}
                cache: 'npm'
            # TODO: Perform a cache action to restore cache before deps install.
            - name: Install dependencies
              run: cd ${{env.SRC_DIR}} && npm ci
            - name: Run tests
              run: cd ${{env.SRC_DIR}} && npm test
    build:
        runs-on: ubuntu-latest
        needs: [lint, test]
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
                
            - name: Use NodeJS ${{env.NODE_VERSION}}
              uses: actions/setup-node@v3
              with:
                node-version: ${{env.NODE_VERSION}}
            # TODO: Perform a cache action to restore cache before deps install.
            - name: Install dependencies
              run: cd ${{env.SRC_DIR}} && npm ci
            
            - name: Build
              run: cd ${{env.SRC_DIR}} && npm test
    
    deploy:
        needs: [test, build]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            # Configure AWS credentials
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # Use your stored AWS Access Key ID
                aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }} # Use your stored AWS Secret Access Key
                aws-region: ${{ env.AWS_REGION }} # Use the region from your environment variables
            
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2
            
            - name: Debug output
              run: |
                echo 'Registry: ${{steps.login-ecr.outputs.registry}}'
                echo 'Repository: ${{ env.ECR_REPO }}'
                echo 'Image Tag: ${{ github.sha }}'
            # - name: Build, tag, and push docker image to Amazon ECR
            #   env:
            #     REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            #     REPOSITORY: ${{env.ECR_REPO}}
            #     IMAGE_TAG: ${{ github.sha }}
            #   run: |
            #       docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
            #       docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
            
            # # Set up the specified version of Terraform
            # - name: Setup Terraform
            #   uses: hashicorp/setup-terraform@v2
            
            # # Initialize your Terraform configuration
            # - name: Terraform Init
            #   run: cd ${{env.TF_ACTION_WORKING_DIR}} && terraform init
        
            # # Validate your Terraform configuration
            # - name: Terraform Validate
            #   run: cd ${{env.TF_ACTION_WORKING_DIR}} && terraform validate 
        
            # # Generate and display an execution plan
            # - name: Terraform Plan
            #   run: cd ${{env.TF_ACTION_WORKING_DIR}} && terraform plan 
        
            # # Apply the changes required to reach the desired state of the configuration
            # - name: Terraform Apply
            #   run: cd ${{env.TF_ACTION_WORKING_DIR}} && terraform apply -auto-approve